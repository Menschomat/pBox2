basePath: /api/v1
definitions:
  model.Box:
    properties:
      fans:
        items:
          $ref: '#/definitions/model.Fan'
        type: array
      id:
        type: string
      lights:
        items:
          $ref: '#/definitions/model.Light'
        type: array
      location:
        type: string
      name:
        type: string
      sensors:
        items:
          $ref: '#/definitions/model.Sensor'
        type: array
      switches:
        items:
          $ref: '#/definitions/model.Switch'
        type: array
    type: object
  model.Enclosure:
    properties:
      boxes:
        items:
          $ref: '#/definitions/model.Box'
        type: array
      id:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  model.Fan:
    properties:
      id:
        type: string
      level:
        type: integer
      name:
        type: string
    type: object
  model.Light:
    properties:
      id:
        type: string
      level:
        type: integer
      name:
        type: string
      state:
        type: boolean
      type:
        $ref: '#/definitions/model.LightType'
    type: object
  model.LightType:
    enum:
    - MONO
    type: string
    x-enum-varnames:
    - MONO
  model.Sensor:
    properties:
      id:
        type: string
      name:
        type: string
      pin:
        type: integer
      target:
        type: integer
      type:
        $ref: '#/definitions/model.SensorType'
      unit:
        type: string
    type: object
  model.SensorType:
    enum:
    - TEMP
    type: string
    x-enum-varnames:
    - TEMP
  model.Switch:
    properties:
      id:
        type: string
      name:
        type: string
      state:
        type: boolean
      type:
        $ref: '#/definitions/model.SwitchType'
    type: object
  model.SwitchType:
    enum:
    - TASMOTA_MQTT
    type: string
    x-enum-varnames:
    - TASMOTA_MQTT
  model.TimeSeries:
    properties:
      times:
        items:
          type: string
        type: array
      values:
        items:
          type: number
        type: array
    type: object
info:
  contact: {}
  title: pBox2 API-Docs
  version: "1.0"
paths:
  /{boxId}/fans/{fanId}:
    get:
      consumes:
      - application/json
      description: Get the details of a specific fan by its unique ID and the ID of
        the box it belongs to.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: integer
      - description: Fan ID
        in: path
        name: fanId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved fan
          schema:
            $ref: '#/definitions/model.Fan'
        "400":
          description: Invalid ID format or fan not found
          schema:
            type: string
      summary: Retrieve a fan by its ID.
      tags:
      - fan
    post:
      consumes:
      - application/json
      description: Update the information of a specific fan by its unique ID and the
        ID of the box it belongs to.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: integer
      - description: Fan ID
        in: path
        name: fanId
        required: true
        type: integer
      - description: Fan object to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Fan'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated fan
          schema:
            $ref: '#/definitions/model.Fan'
        "400":
          description: Invalid payload format or fan not found
          schema:
            type: string
      summary: Update a fan's information.
      tags:
      - fan
  /{boxId}/lights/{lightId}:
    get:
      consumes:
      - application/json
      description: Get information about a specific light in a specific box
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Light ID
        in: path
        name: lightId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Light'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get light
      tags:
      - light
    post:
      consumes:
      - application/json
      description: Update the level of a specific light in a specific box
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Light ID
        in: path
        name: lightId
        required: true
        type: string
      - description: Light object
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Light'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Light'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update light
      tags:
      - light
  /{boxId}/sensors/{sensorId}:
    get:
      consumes:
      - application/json
      description: Get a sensor by its box and sensor ID.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Sensor ID
        in: path
        name: sensorId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Sensor'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get Sensor
      tags:
      - sensor
  /{boxId}/sensors/{sensorId}/data:
    get:
      consumes:
      - application/json
      description: Get time-series data for a sensor by its box and sensor ID.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Sensor ID
        in: path
        name: sensorId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TimeSeries'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get Sensor Data
      tags:
      - sensor
  /{boxId}/switches/{switchId}:
    get:
      consumes:
      - application/json
      description: Get the details of a specific switch by its unique ID and the ID
        of the box it belongs to.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Switch ID
        in: path
        name: switchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved switch
          schema:
            $ref: '#/definitions/model.Switch'
        "400":
          description: Invalid ID format or switch not found
          schema:
            type: string
      summary: Retrieve a switch by its ID.
      tags:
      - switch
    post:
      consumes:
      - application/json
      description: Update the state of a specific switch by its unique ID and the
        ID of the box it belongs to.
      parameters:
      - description: Box ID
        in: path
        name: boxId
        required: true
        type: string
      - description: Switch ID
        in: path
        name: switchId
        required: true
        type: string
      - description: Switch object with new state
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Switch'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated switch
          schema:
            $ref: '#/definitions/model.Switch'
        "400":
          description: Invalid payload format or switch not found
          schema:
            type: string
      summary: Update a switch's state.
      tags:
      - switch
  /enclosure:
    get:
      consumes:
      - application/json
      description: Returns the whole enclosure
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Enclosure'
      summary: Get enclosure
      tags:
      - enclosure
swagger: "2.0"
